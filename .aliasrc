#!/usr/bin/env bash
# LANG="UTF-8"
fetch_() {

    # pfetch /neofetch
    # Define a function to check if a command exists
    command_exists() {
        command -v "$1" >/dev/null 2>&1
    }
    # Define a function to display system information
    if command_exists pfetch; then
        pfetch
    elif command_exists neofetch; then
        NEOFETCH_CONFIG="config/candies.conf" neofetch
    else
        echo "Error: Neither pfetch nor neofetch are installed."

    fi
    # Set colors for pfetch
    if command_exists pfetch; then
        export PF_COLORS="lightblue blue"
    fi

}
fetch_
############ Todo Workaround ################

# restart sshd

portmaster_restart() {
    # sh -c "systemctl status wpa_supplicant.service"

    # echo "restart NetworkManager.."
    # systemctl restart NetworkManager.service

    echo "restarting Portmaster.."
    systemctl restart --now portmaster
    #nohup >/dev/null 2>&1 sh -c "/opt/safing/portmaster/portmaster-start app --data=/opt/safing/portmaster" &

    # Debug info
    # curl http://127.0.0.1:817/api/v1/debug/core
}
alias NetworkManager_restart='echo "restart NetworkManager.."; restart NetworkManager'

iinstall__() {
    # 1 xsane Ardour simple-scan
    # 0
    # orphans: remotemouse
    # $AUR_helper -Syu --needed

    pamac clean -b
    sudo pacman -Scc
    sudo pacman-mirrors -f && sudo pacman -Syu
    pamac update --force-refresh
    # test  #todo powerline-go instead of powerline
    # keep pipewire-pulse
    : <<EOF
-------------------------------------
Info:

Data recovery
    photorec
EOF

}

################## TODO #####################
#############################################

## Alias and Functions ##

tt() {
    # tmux start
    profile=lena
    # server=tlo
    pkg=tmux
    limit=44

    if tmux has-session -t $profile >/dev/null; then
        if [[ $TMUX == "" ]]; then
            # tmux
            tmux new-session
            return
        fi
    else
        if ! tmux has-session -t $profile >/dev/null; then

            tmux new-session -s "$profile"
        fi
    fi

    # Limit Max Session
    while [ "$(tmux list-sessions | wc -l)" -gt $limit ]; do
        oldest_session=$(tmux list-sessions -F "#{session_id},#{session_activity}" | sort -t',' -k2 | head -n 1 | cut -d ',' -f 1)
        tmux kill-session -t "$oldest_session"
        echo "Oldest session was closed"
    done

    # get tmux
    if ! pacman -Qi tmux >/dev/null; then
        sudo pacman --noconfirm -Syu $pkg || echo "error getting $pkg"
    fi
}
tt

safety-up() {

    sudo systemctl enable --now ufw
    sudo systemctl enable --now portmaster
    sudo systemctl enable --now fail2ban
}
safety_down() {

    sudo systemctl disable --now ufw
    sudo systemctl disable --now portmaster
    sudo systemctl disable --now fail2ban
}

set_path() {
    # Check if user id is 1000 or higher
    id_=$(id -u) || true
    [[ "${id_}" -ge 1000 ]] || return

    for i in "$@"; do
        # Check if the directory exists
        [[ -d "${i}" ]] || continue

        # Check if it is not already in your $PATH.
        echo "${PATH}" | grep -Eq "(^|:)${i}(:|$)" && continue

        # Then append it to $PATH and export it
        export PATH="${PATH}:${i}"
    done
}
set_path ~/bin ~/scripts

# Pretty print the path
# alias path='echo $PATH | tr -s ':' '\n'' # ls
alias path='echo -e ${PATH//:/\\n}' # ll

# PATH
export home_=~/ownCloud
export bin_=~/ownCloud/.bin
export dotfile_=~/ownCloud/dotfile

xfce-backup() {
    # xfce4-backup
    if [[ ! -d ~/ownCloud/dotfile/ ]]; then
        mkdir -v ~/ownCloud/dotfile/ || true
    fi
    xfce4-panel-profiles save ~/ownCloud/dotfile/xfce4/xfce4-panel-profiles
    update-desktop-database ~/.config/mimeapps.list
    update-desktop-database ~/.local/share/applications #! deprecated
}
xfce_restore() {
    ln -fv ~/ownCloud/dotfile/xfce4/xfce4-keyboard-shortcuts.xml ~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml
}

pkglist-backup() {
    # sudo pacman -Qqe > pkglist.txt       #! not use --combinedupgrade
    pkg_=~/ownCloud/dotfile/pkglist.txt

    if [[ ! -d ~/ownCloud/dotfile/ ]]; then
        mkdir -pv ~/ownCloud/dotfile/ || true
    fi
    pacman -Qteq >$pkg_ && echo "$pkg_  done"
}

# todo
# option_=" -Syu --needed --batchinstall --noredownload --useask --topdown --sudoloop  "
# earlyPKG_=" pfetch portmaster-stub otpclient syncthing input-leap-git input-leap-headless-git brave-browser-beta librewolf-bin owncloud-client"
pkglist_restore() {
    #todo try: pamac build --no-confirm

    #  early packages:
    sudo pacman -Syu --needed fakeroot yay

    # AUR
    "$AUR_helper" -Syu --needed --batchinstall --useask --topdown --sudoloop "pfetch portmaster-stub otpclient syncthing input-leap-git input-leap-headless-git brave-browser-beta librewolf-bin owncloud-client"
    # --noredownload
    # xargs -a ~/ownCloud/dotfile/pkglist.txt -I % pamac build -k 1 %
    "$AUR_helper" -Syu --needed --batchinstall --useask --topdown --sudoloop - <~/ownCloud/dotfile/pkglist.txt
}
f7-pkglist-backup() {

    f7_=~/ownCloud/dotfile/pkglist_f7.txt

    if [[ ! -d ~/ownCloud/dotfile/ ]]; then
        mkdir -pv ~/ownCloud/dotfile/ || true
    fi
    pacman -Qteq >$f7_ && echo "$f7_  done"
}
f7-pkglist_restore() {
    $AUR_helper -Syu --needed --batchinstall --noredownload --useask --topdown --sudoloop - <~/ownCloud/dotfile/pkglist_f7.txt
    Packet Blacklist / Ignorelist /etc/pacman.conf
}
brave_unlock() {
    # brave-browser-beta
    rm .config/BraveSoftware/Brave-Browser-Beta/SingletonLock
}
firmware_update() {
    # Check if fwupd is installed
    if ! pacman -Q fwupd >/dev/null; then
        # If fwupd is not installed, install it
        sudo pacman -Syu --needed fwupd
    fi

    # Refresh the list of available firmware updates
    # This will make sure that the daemon has the most up-to-date information
    # about available firmware updates
    fwupdmgr refresh

    # Get a list of the updates that are available for installation
    fwupdmgr get-updates

    # Install any available firmware updates
    fwupdmgr update
}
alias fwupd_list="fwupdmgr get-devices"

cclean() {
    # Systemclean
    sudo pacman -Sc --noconfirm
    /usr/bin/sudo journalctl --vacuum-time=14d --rotate
    sudo journalctl --vacuum-size=33M
    if [ -n "$(find ~/.cache -maxdepth 2 -type d -iname 'fr*')" ]; then
        # file-roller
        sudo find ~/.cache/.fr* -delete -print
    fi

    fc-cache -fv

    # todo
    for i in /var/tmp/* ~/.dtrash/* /root/.cache/*; do
        if [ -e "$i" ]; then
            sudo find "$i" -delete -print
        fi
    done

    # minimize xsession-errors
    truncate -s 333 ~/.xsession-errors

    sudo find /var/cache/* -delete -print

    sh -c "sudo rm -rfv /var/lib/pacman/db.lck"
    find ~/.local/share/Trash/files/* -atime 8 -delete -print # digikam
    find ~/.local/share/Trash/info/* -atime 8 -delete -print
    delete_packages_
    ccache -C
    echo ""
    echo "if files below then there are older then 88 Days.."
    echo "in folder .cache"
    sudo find ~/.cache/ -atime 88 -print

}
ccclean() {
    # advance cleanup
    #   rmlint finds space waste and other broken things on your filesystem.  Its main focus lies on finding duplicate files and directories.

    # sudo find / -iname '*.old' -type f -print -delete
    ufw_() {
        # old ufw files
        sudo find /etc/ufw/ -iname "*202*" -type f -print -delete
    }
    ufw_

    if [ -d ~/.dtrash ]; then

        sudo find ~/.dtrash/* -delete -print
    fi

    # digikam Trash
    for i in ~/.local/share/Trash/files/* ~/.local/share/Trash/info/*; do
        if [ -e "$i" ]; then
            sudo find "$i" -delete -print
        fi
    done

    sudo find / -iname '*.bak' -type f -print
    sudo find / -regex /"\(proc\|tmp\|run\)" -prune -o -type f -regex ".*\.pac\(new\|save\|orig\)" -print
    echo "  Checkout above if you want to handel/delete some <.bak and .pacnew> file.."
    sudo systemd-tmpfiles --clean
}

delete_packages_() {
    # Deleted not wanted packages >> cclean
    # List of packages to delete
    packages=(hexchat firefox audacious kodi nemo-emblems vuescan xfburn pidgin xfce4-notes-plugin snapd kodi manjaro-hello)

    # Loop through the packages and remove them
    for package in "${packages[@]}"; do
        if "$AUR_helper" -Qs "${package}" >/dev/null; then
            echo "${package} is installed, deleting..."
            "$AUR_helper" -Rcns "${package}"
        else
            echo "$package is not installed, skipping..."
        fi
    done
    echo "done"
}

pacnew() {

    # sudo find / -iname '*.pacnew' -type f -not \ -path '/run/'

    # todo try to exclude path's
    # sudo find / -iname '*.pacnew' -type f -not -path '/proc/*' -not -path '/run/*' -not -path '/timeshift/*' -not -path '/var/log/*' -not -path '.config/VSCodium/' -not -path '/timeshift/*' -print

    sudo find / -regex /"\(proc\|tmp\|run\)" -prune -o -type f -regex ".*\.pac\(new\|save\|orig\|.old\)" -print
    echo "here is some syncthing conflict:"
    syncthing_conflict
    # sudo find / \( -path /proc -o -path /run -o -path /tmp \) -prune -o -type f -regex ".*\.pac\(new\|save\|orig\)" -print

    # pacdiff -o
}
syncthing_conflict_() {

    sudo find / -iname '*sync-conflict' -type f -print
}

find_oldstuff_() {
    find ~/.config -atime 266 -print
    find ~/.local -atime 266 -print
    find ~/.cache -atime 266 -print
    # find ~/ -atime 266 -print
}
findbrokenpkgs_() {
    # find Broke Symlinks
    command findbrokenpkgs
}
findbrokesymlinks_() {
    sudo pacman -Syu --needed findbrokenpkgs
    sudo find / -xtype l -print
}

checkrebuild_() {

    sudo pacman -Syu --needed rebuild-detector
    command checkrebuild -v
}

move_to_trash_() {

    if [[ $# -eq 0 ]]; then
        return 0 # return success if no arguments passed
    fi
    if ! [[ -d ~/.local/share/Trash/files/ ]]; then
        mkdir -p ~/.local/share/Trash/files/
    fi
    for arg in "$@"; do
        if [[ -e "${arg}" ]]; then # check for existence of file or directory
            # get the base filename without extension
            filename=$(basename -- "${arg}")
            extension="${filename##*.}"
            filename="${filename%.*}"
            # get a unique filename by appending a version number
            counter=1
            while [[ -e ~/.local/share/Trash/files/"${filename}-${counter}.${extension}" ]]; do
                counter=$((counter + 1))
            done
            # move the file or directory to the trash
            mv -vf "${arg}" ~/.local/share/Trash/files/"${filename}-${counter}.${extension}"
        else
            printf "The file or directory '%s' does not exist and was skipped.\n" "${arg}"
        fi
    done
    # find and delete in some days
    find ~/.local/share/Trash/files/* -atime 7 -delete -print
}

rm() {
    # remove with confirmation
    if [ "$(id -u)" != "0" ]; then
        echo -e '      to delete \e[38;2;242;29;0m'"$*"'\e[0m press (y/n) or Enter: '
        stty -echo
        read -r r
        stty echo
        echo
        if [[ "$r" =~ ^[Yy]$ ]] || [[ "$r" == "" ]]; then
            sudo /bin/rm -vr "$@"
        else
            echo "Deletion cancelled"
        fi
    else
        /bin/rm -vr "$@"
    fi
}

orphans() {
    # sudo pacman -Sy
    orphans_="$(sudo pacman -Qtd)"
    if [[ -n "${orphans_}" ]]; then
        sudo pacman -Qqtd | sudo pacman -Rns - || true
    else
        sudo pacman -Qtdv
        echo -e "\n no orphans to remove"
    fi
}

pamacclean() {

    pamac clean --no-confirm --keep 1
    sudo find /tmp/* -delete -print
    sudo find /var/lib/pacman/sync/* -delete -print
    sudo find /var/tmp/pamac/dbs/sync/*.* -delete -print
    sudo find /etc/pacman.d/gnupg -delete -print
    sudo find /var/lib/pacman/db.lck -delete -print
    sudo find /root/.gnupg/* -delete -print
    sudo find /var/cache/pacman/pkg/*.tar.zst.sig -delete -print
    sudo pacman -Sy gnupg archlinux-keyring manjaro-keyring
    sudo pacman-key --init
    sudo pacman -Syy
    sudo pacman-key --populate --populate archlinux manjaro
    sudo pacman-key -u --refresh-keys &&
        sudo pacman-mirrors -a -P https --fasttrack 22 &&
        sudo pacman -Syyu --disable-download-timeout
}

downgrade() {

    command /usr/bin/sudo /usr/bin/downgrade "$@"
}

wine-config() {
    # wine steam
    sudo pacman -Syu --needed wine-staging wine-nine gamescope winetricks protontricks wine-mono vulkan-tools linux-steam-integration wine-gecko steam giflib lib32-giflib libpng lib32-libpng libldap lib32-libldap gnutls lib32-gnutls mpg123 lib32-mpg123 openal lib32-openal v4l-utils lib32-v4l-utils libpulse lib32-libpulse libgpg-error lib32-libgpg-error alsa-plugins lib32-alsa-plugins alsa-lib lib32-alsa-lib libjpeg-turbo lib32-libjpeg-turbo sqlite lib32-sqlite libxcomposite lib32-libxcomposite libxinerama lib32-libgcrypt libgcrypt lib32-libxinerama ncurses lib32-ncurses opencl-icd-loader lib32-opencl-icd-loader libxslt lib32-libxslt libva lib32-libva gtk3 lib32-gtk3 gst-plugins-base-libs lib32-gst-plugins-base-libs vulkan-icd-loader lib32-vulkan-icd-loader glew lib32-dbus-glib lib32-freeglut lib32-glew lib32-gtk2 lib32-imlib2 lib32-libappindicator-gtk2 lib32-libcaca lib32-libcurl-compat lib32-libcurl-gnutls lib32-libdbusmenu-glib lib32-libdbusmenu-gtk2 lib32-libgcrypt lib32-libid3tag lib32-libidn11 lib32-libindicator-gtk2 lib32-libjpeg6-turbo lib32-libmikmod lib32-libmodplug lib32-libnm lib32-libpng12 lib32-librtmp0 lib32-libtheora lib32-libtiff lib32-libudev0-shim lib32-libvpx lib32-libwebp lib32-openssl lib32-pipewire lib32-sdl lib32-sdl2_image lib32-sdl2_mixer lib32-sdl2_ttf lib32-sdl_image lib32-sdl_mixer lib32-sdl_ttf lib32-smpeg libcurl-compat libcurl-gnutls libdbusmenu-gtk2 libgcrypt15 libidn11 libindicator-gtk2 libjpeg6-turbo libpng librtmp0 libtiff4 libudev0-shim libvpx openssl opusfile sdl2_image sdl2_mixer sdl2_ttf sdl_image sdl_mixer sdl_ttf smpeg vulkan-extra-layers vulkan-extra-tools lib32-alsa-lib lib32-alsa-plugins lib32-gnutls lib32-gst-plugins-base-libs lib32-libldap lib32-libpulse lib32-libva lib32-libxml2 lib32-mpg123 lib32-openal lib32-v4l-utils vulkan-intel vulkan-mesa-layers vkd3d

    wineserver -k 15

    # mkdir ~/.wine

    env WINEPREFIX="$HOME"/.wine wineboot

    #!
    echo "prefix set.. "
    echo ""
    # export WINEARCH=win64
    # export WINEARCH=win32

    sudo winetricks --self-update

    echo "starting winetricks -q.."
    # winetricks -q -v d3dx9 d3dcompiler_43 d3dcompiler_47 corefonts vcrun2017 cjkfonts allfonts vcrun2005 dotnet48 xinput wined3d xact dxvk d3dx11_43 d3dx11_42 vcrun2008 vcrun2010
    #!

    # sh -c 'sudo chown -Rv "${USER}":"${USER}" ~/.wine'

    echo "wineboot init"
    wineboot --init

    echo ""

    wine --version

    echo ""
    echo done..

    # winetricks
}

# if [[ -d ~/.wine ]]; then

# export WINEARCH=win32 WINEPREFIX="$HOME"/.local/share/wineprefixes/win32
# export WINEESYNC=1
# fi
wine_clean() {

    # yy -Rc wine dxvk-bin wine-mono vulkan-tools lutris wine-gecko lib32-vkd3d winetricks vkd3d d3dx9 vulkan-extra-layers vulkan-extra-tools

    wineserver -k 15

    .local/share/applications
    sudo find ~/.local/share/applications/wine -delete -print
    sudo find ~/.local/share/wineprefixes/* -delete -print
    sudo find ~/.config/menus/applications-merged/wine* -delete -print
    sudo find ~/.config/mimeapps.list/wine -delete -print
    sudo find ~/.config/mimeapps.list/mimeinfo.cache -delete -print
    sudo find ~/.local/share/desktop-directories/wine* -delete -print
    sudo find ~/.local/share/icons/????_*.{xpm,png} -delete -print
    sudo find ~/.local/share/icons/*-x-wine-*.{xpm,png} -delete -print
    sudo find ~/.local/share/mime/packages/x-wine* -delete -print
    sudo find ~/.config/mimeapps.list/wine-extension* -delete -print
    sudo find ~/.local/share/applications/mimeinfo.cache -delete -print
    sudo find ~/.local/share/mime/application/x-wine-extension* -delete -print
    sudo find ~/.config/mimeapps.list/wine-extension*.desktop -delete -print
    sudo find ~/.local/share/icons/hicolor/*/*/application-x-wine-extension* -delete -print
    sudo find /root/.wine -delete -print
    sudo find ~/win32 -delete -print
    sudo find ~/win64 -delete -print
    update-desktop-database ~/.config/mimeapps.list
    update-desktop-database ~/.local/share/applications
    update-mime-database ~/.local/share/mime/
    sudo find ~/.wine/drive_c/users/"${USER}"/Temp ~/.wine/drive_c/windows/temp -delete -print
    ln -s /tmp/ ~/.wine/drive_c/users/"${USER}"/Temp
    ln -s /tmp/ ~/.wine/drive_c/windows/temp

    sudo find ~/.wine -delete -print

}
steam_clean() {

    sudo find ~/.local/share/Steam/ -delete -print
    sudo find ~/steam* -delete -print

}

# alias §="xdotool - < /home/shaderico/.local/bin/magickeys.sh "
# bindkey -s '§' "xdotool_ "

xdotool_() {

    /home/shaderico/.local/bin/magickeys_off.sh
}

# xdotool_() {
#     if $toggle; then
#         echo hi
#         toggle=true
#         magickeys.sh
#     else
#         pkill magickeys.sh
#         toggle=false
#         echo hiw

#     fi
# }

# xdotool_() {
#     #  keyboard input / automate / macro / xbindkeys #! not on wayland but "xte, ydotool, wtype "

#     while true; do
#         xdotool key 1
#         xdotool key 2
#         xdotool key 3
#         xdotool key 4
#         sleep 0.4
#     done
# }

# while true; do
# bindkey -s '1'
# bindkey -s '2'
# bindkey -s '3'
# bindkey -s '4'
# sleep 0.4
# done

# extramaus cursor / mouse
# extramaus

alias cp='cp -vi '    # Confirm before overwriting something
alias df='df -h '     # Human-readable sizes check
alias free='free -h ' # Show sizes in MB
alias whereami='echo $PWD'
alias more='less --use-color'

manjaro-stable() {
    sudo pacman-mirrors --api --set-branch stable
    pamacclean
}
manjaro-testing() {
    sudo pacman-mirrors --api --set-branch testing
    pamacclean
}

pacman-update() {
    # Systemupdate
    os=$(cat /etc/arch-release)

    if grep -q "Manjaro" /etc/arch-release; then

        sudo pacman-mirrors -a -P https --fasttrack 11 &&
            sudo pacman -Syu --disable-download-timeout

    elif [[ $os == "Arch Linux"* ]]; then
        sudo pacman -Syu --disable-download-timeout

    elif [[ $os == "endeavour"* ]]; then

        eos-rankmirrors
        sudo pacman -Syu --disable-download-timeout

    else
        echo -n "Unknown OS"
        for ((i = 1; i <= 3; i++)); do
            echo -n "."
            sleep 1
        done
        echo ""
        echo "Cancel update"
    fi

}
log_packages_() {
    # Log packages
    awk -F'[[T ]' '$6 == "upgraded" { print $2; }' /var/log/pacman.log | uniq -c | sort -rn
}
arch_() {
    # Arch
    os=$(cat /etc/arch-release)

    arch-grub() {
        if [[ $os == "Arch Linux"* ]]; then

            sudo grub-mkconfig -o /boot/grub/grub.cfg
        fi
    }
    reflector() {
        if [[ $os == "Arch Linux"* ]]; then
            sudo "reflector --latest 5 --sort rate --save /etc/pacman.d/mirrorlist "
        fi
    }

    arch-pamacclean() {
        if [[ $os == "Arch Linux"* ]]; then

            pamac clean --no-confirm --keep 1
            sudo find /tmp/* -delete -print
            sudo find /var/lib/pacman/sync/* -delete -print
            sudo find /var/tmp/pamac/dbs/sync/*.* -delete -print
            sudo find /etc/pacman.d/gnupg -delete -print
            sudo find /var/lib/pacman/db.lck -delete -print
            sudo find /root/.gnupg/* -delete -print
            sudo find /var/cache/pacman/pkg/*.tar.zst.sig -delete -print
            sudo pacman-key --init
            sudo pacman -Syy
            sudo pacman-key --populate archlinux
            sudo pacman-key --refresh-keys
            sudo pacman -Syyu --disable-download-timeout
        fi
    }
}
arch_
alias mirror-check='pacman-mirrors --status'
grub-update() {
    # sudo grub-install --recheck && sudo update-grub
    sudo grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=manjaro --recheck --verbose
    sudo mkinitcpio -P
    sudo update-grub && sudo tree /boot/efi
}

alias pacman-grep='pacman -Qe | grep '

alias mv='mv -iv '

# pamac build "$1"
# paru / yay
if pacman -Qq paru >/dev/null; then
    AUR_helper=paru
else
    AUR_helper=yay
fi
alias zz=yy # US Keyboard
# alias zz="yy --disable-download-timeout"
alias yy="${AUR_helper}"
#todo if ( "$AUR_helper" == "$AUR_helper" ) then
# "$AUR_helper" else
#  echo "" && $AUR_helper --show --news && echo "here we go Richard"
# fi

alias rechner-bc='   bc -ql'        #Calculator
alias calculator-bc='bc -ql'        #Calculator
alias inxi-Fnzy='LANG=C inxi -Fnzy' #Info System      #-a uuid info

# Antivirus
alias defenderscan-libredefender='sudo libredefender scan ~/'
alias defenderscan_infection='sudo libredefender infections '

# Network
# https://wiki.archlinux.org/title/Systemd
# open port check
alias port_open_lsof='sudo lsof -i -P -n | grep LISTEN' #port open-list
# alias ps='ps'   # ps System Info running like 'whish shell'
alias ss='ss '                                       # like lsof
alias port-no-ping-input-ip=' nmap -T4 -A -v -Pn '   # nmap -T4 -A -v -Pn 127.0.0.1
alias port-all-input-ip='nmap -p 1-65535 -T4 -A -v ' # nmap -p 1-65535 -T4 -A -v 127.0.0.1
# alias port-all-and-udp='nmap -sS -sU -T4 -A -v '   # nmap -sS -sU -T4 -A -v 127.0.0.1
# alias port-nmap-input-ip='nmap -T4 -A -v '         # nmap -T4 -A -v 127.0.0.1
alias port-live="  watch -n1 'ss -tp'"
alias port_live_2="watch -n1 'lsof -i4 -itcp'"
alias wifi-info='iw list'

# resolve check --> /etc/systemd/resolved.conf
alias resolve_network_check='systemctl status systemd-resolved.service'

# security check
port_check_() {
    echo "listening ports"
    sudo netstat -tunlp
}

fail2ban_() {
    # --- Enable fail2ban
    sudo pacman -Sy --needed fail2ban

    if [[ ! -f /etc/fail2ban/jail.local ]]; then
        sudo sh -c 'echo  "
[DEFAULT]
bantime = 1d
[sshd]
enabled = true" >/etc/fail2ban/jail.local'
    fi

    # if [[ ! -f /etc/fail2ban/jail.local ]]; then
    #     print '\n[DEFAULT]\nbantime = 1d\n[sshd]\nenabled = true' | sudo tee /etc/fail2ban/jail.local
    # fi

    sudo systemctl --now enable fail2ban
    sudo systemctl --now start fail2ban
}

# speedtest
alias speedtest="   speedtest --secure" # https
alias h-speedtest_http=" speedtest "    # http

# Networkinfo          #* Network Mapping status 'rpcbind'
alias ip-c='    ip -c a' # ip-coler     ip addr      ip -br -c addr show     ip route show   ip link show

alias ip-cAddr='ip -br -c addr show'
alias ifconfig='ifconfig' # same as ip-coler with netmask info
alias nmcli='nmcli | more '
alias nmtui='xfce4-terminal --geometry=115x30 --hide-scrollbar -H -x zsh -c "nmtui"'
alias myip="      sh -c 'curl http:/ipecho.net/plain; echo'"
alias whatismyip="sh -c 'curl http:/ipecho.net/plain; echo'"
alias traffic-jnettop='xfce4-terminal --geometry=80x20 --hide-scrollbar -H -x zsh -c "sudo jnettop"'
alias networkmanagerlog='journalctl --boot 0 --unit NetworkManager.service --follow' # NetworkManager info scan

journalctl-live_() {
    # Filtert live Journalctl-logs
    exclude=("blob")
    echo "live Journalctl.."
    patterns=$(
        IFS="|"
        echo "${exclude[*]}"
    )

    # Run journalctl in live mode and filter out specified patterns
    sudo journalctl -f | grep -vE "$patterns"
}

alias journalctl-kernel='sudo journalctl -rp 3 -xb|more'
alias journalctl-log='   sudo journalctl -r |more'
alias whois='whois' # whois input-ip 127.0.0.1
alias kernel_info='lsmod'
alias traceroute='traceroute' # traceroute input-ip    # traffic-backtrace info scan    # MSDOS tracert google.ch

alias network_bettercap_monitoring='sudo bettercap'                                                               # network-monitoring     live-scan spoofing
alias network-sniffer-monitoring='xfce4-terminal --geometry=100x28 --hide-scrollbar -H -x zsh -c "sudo  sniffer"' # network-monitoring     live-scan
# alias netstat="sudo netstat -tapn |  sed '1 d' | sort -r +6 | grep -v 'TIME_WAIT' | grep -v 'FIN_WAIT' | grep -v 'LISTEN' | grep -v 'CLOSING' | grep -v 'LAST_ACK'"
alias sniffglue="sudo sniffglue" # Network sniffer
alias netstat-live='xfce4-terminal --geometry=100x28 --hide-scrollbar -H -x zsh -c "sudo netstat -c -i eno1"'
alias networkstatus='networkctl list'
alias ufw-iptables='sudo iptables -L'
alias whowatch='whowatch '                                                                      # who is on my network
alias traffic_wavemon='xfce4-terminal --geometry=88x28 --hide-scrollbar -H -x zsh -c "wavemon"' # Network traffic strength
alias tcpdump_wlp59='sudo tcpdump -i wlp59s0'                                                   # wireshark cli
alias ping='ping -c 3'                                                                          # Windows nslookup
alias gateway-ping='ping _gateway'

# Gateway
alias route='route -n'

# VPN
alias vpnProtonvpn='protonvpn'
vpn-eth_deprecate() {
    # ! deprecate  -->> use AUR
    # https://unlimited.ethz.ch/display/itkb/VPN
    if [[ -d /opt/cisco/anyconnect ]]; then
        sh -c "sudo rm -rfv /opt/cisco/anyconnect" || return 1
    fi
    sh -c "sudo mkdir -pv /opt/cisco/anyconnect/" || true
    sh -c "sudo ~/ownCloud/.bin/anyconnect-linux64-4.10.02086-core-vpn-webdeploy-k9.sh"

    fail2ban_
}
# sudo dhclient -v
# sudo airmon-ng

# Find / Help /forget
alias help_apropos='  apropos '
alias forget_apropos='apropos '

# Convert
alias ffmpeg='ffmpeg -hide_banner' #'ffmpeg -i input.mp4 output.avi'  https:/ffmpeg.org/ffmpeg.html

# cam-info
alias cam-info=' v4l2-ctl --list-devices'

# Downloads    youtube-dl, clipgrab
yt() {
    mkdir -p ~/Downloads/yt
    cd ~/Downloads/yt || true
    yt-dlp --add-metadata -i -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" "$1" || echo "failed"
    echo "done"
}
yta() {
    mkdir -p ~/Downloads/yt
    cd ~/Downloads/yt || true
    yt-dlp -x -f bestaudio/best "$1" || exit
    echo "done"
}
alias wget='wget -c'                                                   #web get #Commandline Homepage URL Download > index.html
alias wget-completed='wget -m -c -r -np -p -E -k -K 'target-url-here'' #web get #Commandline Homepage URL Download > index.html
# alias curl-completed='wget -r -k -E -l 8 '     #web get #Commandline Homepage URL Download > index.html
alias server-response='wget --server-response'        # Website/Page Speed test
alias speed-wget-speedometer='wget --server-response' # Website/Page Speed test

#todo break stuffs alias curl="curl -C "                                 #web get #Commandline Homepage URL Download > index.html

# pastebin
# https://forum.manjaro.org/t/howto-use-public-command-line-pastebin-services-without-installing-anything/38378
paste_c() {
    # https://paste.c-net.org/
    "$@" | curl -s --data-binary @- 'https://paste.c-net.org/'
}
paste_0x0() {
    # https://0x0.st/
    "$@" | curl -F 'file=@-' https://0x0.st
}
paste_clbin() {
    # https://clbin.com/
    "$@" | curl -F 'clbin=<-' https://clbin.com
}
paste_ix() {
    # http://ix.io/
    "$@" | curl -F 'f:1=<-' ix.io
}

v() {

    if [[ "$(id -u)" != "0" ]]; then
        sudo nvim "$@"
    else
        nvim "$@"
    fi
}

f() {
    if [ -d "$1" ]; then
        if [ "$(id -u)" != "$(stat -c %u "$1")" ]; then
            sudo nemo "$1"
        else
            nemo "$1"
        fi
    else
        nemo
        # if [[ ! /bin/nemo ]]; then

        #     thunar
        # fi
    fi
}

# change
# alias $HOME="nope"

#nvidia Proprietary
alias nvidia0300='sudo mhwd --force --auto pci nonfree 0300'
alias mhwd-info='vulkaninfo; mhwd -l ; mhwd -li; modprobe nvidia'

# Sound    # pipewire-media-session are wireplumber
#todo speaker-test
#todo speaker-test -dhw:0,0 -c2 -l3 -twav
alias sound-info='aplay -L; inxi -Ax; wpctl status' # speaker-test -D pulse -c2 -l2 -t wav
sound_cli() {
    alsamixer
}

8888() {
    #todo
    for file in *.mp4; do ffmpeg -i "$file" -af "volume=3dB" "output_$file"; done
}

alias ls="ls -thaNr  --color=auto --sort=time"
alias ll="ls -thaNrl --color=auto --sort=time"

alias ln='/usr/bin/ln -v'
alias chown='chown -c '
alias chmod='chmod -c '
alias grep='grep --color=auto'
alias g='grep --color=auto'

gg() {
    # grep man info
    man "$1" | grep --color=auto "$2"
}

alias egrep='egrep --colour=auto'
alias fgrep='fgrep --colour=auto'
alias diff='diff --color=auto'
# These common commands are just too long! Abbreviate them.
alias ka='pkill -5 ' #'killall'

alias e='eval "${EDITOR:=neovim}"'
export VISUAL=$EDITOR
if [[ -n ${DISPLAY} ]]; then
    export EDITOR="/usr/bin/codium"
    # export EDITOR=" /usr/bin/codium --unity-launch "
elif
    [[ -z ${DISPLAY} ]]
then
    export EDITOR="neovim"
else
    export EDITOR="kate"
fi

ee() {

    local count=1
    local filename="Untitled-$count"
    while [ -e "$filename" ]; do
        count=$((count + 1))
        filename="Untitled-$count"
    done
    $EDITOR -w "$filename"
    return

}
np() {
    #todo
    # find ~/ PKGBUILD_ -atime 88 -print -path '!~/Downloads'  -exec mv {} ~/Downloads \;
    $EDITOR -w PKGBUILD
}
alias makepkg-si='makepkg -si' #git clone - PKGBUILD

# Git
## create git
alias gitinit='git init'
gitup() {
    # local
    git add .
    git add README.md
    # git commit -m "$1"
    git commit -m "commit"
    git commit -m update
    git branch -M master
    # git remote add origin git@github.com:username/reponame
    git push master
}

gh_website() {

    git remote add origin git@github.com:terashy88/website.git
    git branch -M master
    git push -u origin main master
}

alias gitstatus='git status'
alias gitlog-info='git log --pretty=on'
alias gitremotestatus='git remote -v'

alias gitdiff='git diff'

# Create branch
alias gitbranch='git branch'
alias gitcheckout='git checkout -b'
alias gitremoteadd='git remote add'
alias gitremoterm='git remote rm'

# Git Pull
alias gitpull='git pull'

# Git fetch
alias gitfetch='git fetch'
alias gitpull='git merge'

alias gitclone='git clone'
alias gittag='git tag -a -m'
alias gitreflog='git reflog'
alias gitl='git log --graph --oneline --decorate'
alias giti='echo
git log -n 12 --graph --oneline --decorate
echo
git status
echo'
parse_git_branch() {
    # Show Git branch/tag, or name-rev if on detached head
    (git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null
}

git_delete_() {
    #  delete both, remote first
    git rm --cached
}

# Git fix cache
alias git_fix_cache="git rm -r --cached ."

: <<GIT
# Delete all changes in the branch
git checkout .

# unstack
git reset

GIT

# Quick fast Navigat access

#todo
# please() {
#     sudo "$(fc -l -1)" || true
# }
# alias sudo='sudo_'
# sudo_() {
#     command sudo "$@"
# }
# please() {
#     sudo "$@"
# }
please() {
    command sudo !!
    echo ""
}
eee() {
    # Editor Quick load
    $EDITOR ~/ownCloud/p-git/todo
    $EDITOR ~/ownCloud/dotfile/cheatsheet
    $EDITOR ~/ownCloud/dotfile/.stignore
    $EDITOR ~/ownCloud/dotfile/.aliasrc
    $EDITOR ~/ownCloud/dotfile/.zshrc
    $EDITOR ~/ownCloud/W-link/css/style.css
    $EDITOR ~/ownCloud/W-link/js/index.js
}

my_touch() {
    # Define my_touch function to create directories and files
    for arg in "$@"; do
        if [[ -n "${arg}" ]]; then
            mkdir -p "$(dirname "${arg}")" && command touch "${arg}" && ls -ld "${arg}"
        else
            echo "Invalid argument: ${arg}"
        fi
    done
    # Define touch function to call my_touch with -v option
}
touch() {
    # Avoid infinite recursion by not calling the touch function here
    my_touch "$@"
}

# mkdir() {
#     # Check if at least one argument is provided
#     if [[ $# -eq 1 ]]; then

#         # make directory and subdirectories if not exist
#         for dir in "$@"; do
#             if [[ ! -d "$dir" ]]; then
#                 command /bin/mkdir -pv "$dir" || true
#             fi
#         done
#     fi
# }

t() {

    if [[ ! -d ~/Downloads/test ]]; then
        mkdir -p ~/Downloads/test
    fi
    cd ~/Downloads/test || return
    eval ll || ls
}

dl() {

    cd ~/Downloads/ || return
    ll || ls
}
cd..() {

    cd .. || true
    ll || ls
}
D-link() {

    cd ~/ownCloud/D-link/ || true
    eval ll || ls
}
S-link() {

    cd ~/ownCloud/S-link/ || true
    eval ll || ls
}
M-link() {

    cd ~/ownCloud/M-link/ || true
    eval ll || ls
}
W-link() {

    cd ~/ownCloud/W-link/ || true
    eval ll || ls
}
P-link() {

    cd ~/ownCloud/P-link/ || true
    eval ll || ls
}
bin() {

    cd ~/ownCloud/.bin/ || true
    eval ll || ls
}

# mount
alias mount='mount |column -t'

# systemctl
alias enable='      sudo systemctl enable  --now '
alias disable='     sudo systemctl disable --now '
alias status='more| sudo systemctl status  --now '
alias restart='     sudo systemctl restart --now '
alias stop='        sudo systemctl stop    --now '
alias start='       sudo systemctl start   --now '
alias sys-port='systemctl status|less --use-color'
alias sys-status='systemctl list-unit-files|less ' # stacer, <who>
# alias sys-info='pactl list cards pactl list sinks'
alias errors='          sudo systemctl --failed'
alias failed='          sudo systemctl --failed'
alias startup-speed_info='      systemd-analyze'
alias startup-speed2_info='     systemd-analyze blame'
alias startup-speed_analyze='   systemd-analyze critical-chain'

alias shell-echo='echo $SHELL '

# Boottime info
alias boottime='sudo systemd-analyze blame | head -n 20'
alias bootinfo='sudo efibootmgr'

# Akku info
alias batterie-status='sudo tlp-stat --battery'
alias powertop='sudo powertop'
# powertop --calibrate

swap-activate() {
    # swapfile
    set -e

    # set swapfile path
    path_="/swapfile"

    # convert diskspace to MB
    diskspace="$(df --output=avail -B1 / | tail -n 1)"
    diskspace=$((diskspace / 1024 / 1024)) # Convert GB to MB

    while true; do

        echo "How much MB should your swapfile have?"
        echo "Free space is $diskspace MB"
        echo "  Enter here: "
        read -r i

        # number check
        if ! [[ "$i" =~ ^[0-9]+$ ]]; then

            echo "Memory size must be numbers"
            continue
        fi

        # Diskspace check
        if [[ $i -ge $diskspace ]]; then

            echo "Not enough disk space to create a swapfile of ${i} MB."
            continue
        fi

        # lesser then 1
        if [[ $i -le 0 ]]; then
            echo "${i} MB is a invalid value."
            continue
        fi

        break
    done

    echo -e 'Do you want to use \e[38;2;242;29;0m'"${i}"'\e[0m MB?'
    echo "Press y are Enter to continue"

    read -r r

    if [[ "$r" =~ ^[Yy]$ ]] || [[ "$r" == "" ]]; then

        # Trap signals to perform cleanup actions
        cleanup_() {
            if swapon --show | grep -q "file"; then
                sudo swapoff $path_ || true
                sh -c "sudo rm $path_"
            fi
        }
        cleanup_

        # build swapfile
        sudo dd if=/dev/zero of=$path_ bs=1M count="$i" status=progress || {
            echo "Error creating swapfile"
            sleep 3
            exit 1
        }
        # set permission
        if sh -c "sudo chmod 600 $path_"; then
            echo "chmod 600 $path_"
        else
            echo "Error changing permissions"
            sleep 3
            exit 1
        fi
        # create swapfile
        sudo mkswap $path_ || {
            echo "Error setting up swap"
            sleep 3
            exit 1
        }
        # aktive swap
        sudo swapon $path_ || {
            echo "Error activating swap"
            sleep 3
            exit 1
        }

        # config swap
        sudo sh -c " cat <<'EOF' >/etc/sysctl.d/99-swappiness.conf

    vm.swappiness=11
    vm.vfs_cache_pressure=66
    vm.dirty_ratio=3
    # sudo sysctl vm.vfs_cache_pressure=100
    # sudo sysctl vm.swappiness=60
    # sudo mkinitcpio -P
    # sudo sysctl --system
EOF
"

        # set fstab
        if sudo sh -c "grep -q $path_ /etc/fstab"; then
            echo "Entry already exists in /etc/fstab"
        else
            sudo sh -c "echo \"$path_ none swap defaults 0 0\" >> /etc/fstab"
            echo "Entry added to /etc/fstab"
        fi
    else
        echo "swapfile cancelled.."
    fi

    # show swap
    if [[ -e $path_ ]]; then
        swapon --show
    fi
}
alias swap_delete='sudo swapoff /swapfile ; sudo rm /swapfile ; sudo mkinitcpio -P'
alias swapStatus='swapon --show'

# Get server cpu info
alias env='env ' # environment information
# unset $(env | cut -d= -f1)
# alias printenv="printenv "        # same as env
alias cpuinfo='cat /proc/cpuinfo' # shortform 'lscpu'
alias cpuwatch='watch -n 0.5 grep \"cpu MHz\" /proc/cpuinfo'
alias monitor-cpu='sudo cpupower monitor'
# alias btop-btm='exo-open --launch TerminalEmulator --geometry=115x30 --hide-scrollbar -H -x zsh -c "btm"' #! use htop
# alias monitor-btop-btm='xfce4-terminal --geometry=115x30 --hide-scrollbar -H -x zsh -c "btm"'   #! use htop
alias monitor-dedector-xrandr='xrandr' #monitor-dedector
alias system-info='sudo sysctl --system'
alias sensors='sensors '
alias lspci='lspci -k ' # Grafikcard information
alias pstree='pstree '  # systemd tree views
# sudo dmesg
# sudo sensors-detect
# coredumpctl list |more

# Data recovery
# alias ddrescue='ddrescue' # man ddrescue
recovery_() {
    # Recover corrupt files
    sudo e2fsck -v -f "$1"
}

# Input-Info
alias libinput-info='libinput list-devices' # USB, Touchpad, etc
alias xinput='xinput '                      # 'xinput -list'
#lsusb

# ~/.inputrc   #todo ^[[200~ fix
# set enable-bracketed-paste on
set enable-bracketed-paste off

# Faster completion
set show-all-if-unmodified on
# Color files by types
# Note that this may cause completion text blink in some terminals (e.g. xterm).
set colored-stats On
# Append char to indicate type
set visible-stats On
# Mark symlinked directories
set mark-symlinked-directories On
# Color the common prefix
set colored-completion-prefix On
# Color the common prefix in menu-complete
set menu-complete-display-prefix On

# # turn off ZLE bracketed paste in dumb term
# # otherwise turn on ZLE bracketed-paste-magic
# if [[ $TERM == dumb ]]; then
#     unset zle_bracketed_paste
# else
#     autoload -Uz bracketed-paste-magic
#     zle -N bracketed-paste bracketed-paste-magic
# fi

# get GPU ram on desktop / laptop#
# alias  meminfo='grep -i --color memory /var/log/Xorg.0.log'
alias mem-psmc='ps -Ao "comm %cpu %mem"'
# ps aux --sort -%mem

# logout
alias tlo_logout_fast='     xfce4-session-logout --logout --fast'
alias logout_xfce-session=' xfce4-session-logout --logout '

# turn screen off
alias screenoff="xset dpms force off"

# lock-screen #todo test i3lock

# Screen tearing reset
zoom_xfwmScreenTearingReset() {
    # https://wiki.archlinux.org/title/Xfwm
    xfwm4 --replace --vblank=glx &

    # Safe mode
    # xfconf-query -c xfwm4 -p /general/vblank_mode -s glx
}

qq() {
    # xflock4 can be skip by terminate the terminal
    xfce4-terminal --hide-scrollbar --hide-menubar --hide-borders --fullscreen --cursor off -x bash -c "sleep 2 ; cmatrix || true ; trap 'xflock4' SIGTERM; xflock4"
}

weather() {
    # Weather / Wetter
    alias wetter="weather"
    xfce4-terminal --hide-scrollbar --hide-menubar --maximize -x sh -c "curl wttr.in;  read -n 1 -srp 'Press any key to continue...'"
}

# sort files in current directory by the number of words they contain
alias wordy='wc -w * | sort | tail -n10'
alias filecount='sudo ls -aRF | wc -l'

# Gets the total disk usage on your machine
alias diskinfo='sudo parted --list' # partition gpt are msdos info
alias diskinfo2='df -hl ~'
alias fdisk='fdisk -x' #fdisk space / UUID etc
alias uuid-info=' lsblk -fa'
alias uuid-blkid='blkid'
# alias disk-uuid='    df -hTl'
#more uuid info 'lsblk -o PATH,LABEL,NAME,UUID'

#Gives you what is using the most space. Both directories and files. Varies on current directory
alias most='        du -hsx * | sort -rh | head -15'  # Biggest files in folder
alias biggest-file=' du -hsx * | sort -rh | head -15' # Biggest files in folder
alias diskspace='   gdu'                              # Biggest files in folder 'd'=delete

# shutdown
pwf() {

    xfce4-terminal --hide-scrollbar --hide-menubar --hide-borders --geometry=66x14 -x sh -c "sleep 1 ; termdown 88 && systemctl poweroff"
}

# htop
alias htop='xfce4-terminal --hide-scrollbar --hide-menubar --hide-borders --maximize -x sh -c "htop"'

# Finance
alias trade='xfce4-terminal --hide-scrollbar --hide-menubar --hide-borders --maximize -x sh -c "cointop"'

alias history-grep='history | grep'

InputLeap_() {
    # new barrier

    while pgrep -x "input-leap | wc -l -gt 1" >/dev/null; do
        pkill -f input-leap -n 1
    done
    if ! pgrep -x input-leap >/dev/null; then
        /bin/input-leap &
    fi

}
InputLeap_

barrier-keygen() {
    # barrier new barrier keyGen
    if [[ ! -d ~/.local/share/barrier/SSL/Fingerprints ]]; then
        mkdir -pv ~/.local/share/barrier/SSL/Fingerprints || true
    fi
    openssl req -x509 -nodes -days 365 -subj /CN=Barrier -newkey rsa:4096 -keyout ~/.local/share/barrier/SSL/Barrier.pem -out ~/.local/share/barrier/SSL/Barrier.pem
    fingerprint=$(openssl x509 -fingerprint -sha256 -noout -in ~/.local/share/barrier/SSL/Barrier.pem | cut -d"=" -f2)
    echo "v2:sha256:$fingerprint" >~/.local/share/barrier/SSL/Fingerprints/Local.txt
}

aa() {
    # ChatGPT Terminal https://theb.ai/
    exo-open --launch TerminalEmulator --hide-menubar --geometry=88x22 -Hx bash -c "echo \"    Welcome to tgpt AI - Bai Chatbot:\"; tgpt -i "
}
aaa() {
    # ChatGPT Terminal
    exo-open --launch TerminalEmulator --hide-menubar --geometry=88x22 -Hx bash -c "echo \"    Welcome to tgpt AI - Bai Chatbot:\"; tgpt -m "
}

# chatblade with OpenAPI    #!   pay
# function aaa() {
#     export OPENAI_API_KEY="$(gpg --quiet --batch --decrypt ~/ownCloud/p-git/openApi_key.pgp 2>/dev/null)"
#     chatblade "$1"
# }
# export OPENAI_API_KEY="$(gpg --quiet --batch --decrypt ~/ownCloud/p-git/openApi_key.pgp 2>/dev/null)"
# alias aaa='chatblade'

# Password Crack
alias john='john ' #'john file'

# Mariadb / fork of MySQL    'sudo mysql -u root --auto-rehash'
alias mariadb='echo  mariadb -u root -p;  mariadb -u root -p'
mariadb_activate() {
    disable mariadb || true
    'sudo rm -fr /var/lib/mysql' || true
    sudo pacman -Sy mariadb --needed || true
    sudo mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql || true
    if [[ ! -d /var/lib/mysqltmp ]]; then
        sh -c "sudo mkdir -pv /var/lib/mysqltmp" || true
    fi
    sh -c "sudo chown mysql:mysql /var/lib/mysqltmp" || true
    mariadb-tzinfo-to-sql /usr/share/zoneinfo | sh -c "sudo mysql -u root -p mysql" || true
    enable mariadb
}
alias mariadb_securePrompt='sudo mysql_secure_installation'
alias mariadb_versionUpgrade='sudo mysql_upgrade -u root -p --force;
sudo mysqlcheck --all-databases -u root -p -r;
sudo mysqlcheck --all-databases -u root -p -o'

# Drucker / Printer CUPS
alias print-activate='sudo pacman -Sy --needed  cups avahi; sudo gpasswd -a "$USER" sys;
sudo systemctl enable --now cups.service;
sudo systemctl enable --now cups.socket;
sudo systemctl enable --now cups.path;
sudo systemctl enable --now avahi-daemon.service'

alias print_deactivate='sudo pacman -Rc
sudo systemctl disable --now cups.service
sudo systemctl disable --now cups.socket
sudo systemctl disable --now cups.path'

alias printer-show='lpstat -p -d'

# Scan
# viewscane
# scanimage -L
# brsaneconfig4 -a
# sudo sane-find-scanner
# sudo scanimage -vvL

anbox_() {
    # Anbox snap #! deprecated
    alias anbox_snap_aktiv='git clone https://github.com/anbox/anbox.git --recurse-submodules
cd anbox
mkdir build
cd build
cmake ..
make'
    alias anbox_snap_delete='yy -Rc glm gtest properties-cpp'
    # Anbox AUR
    alias anbox-activate='sudo mkdir /dev/binderfs
mount -t binder binder /dev/binderfs
systemctl enable --now anbox-container-manager.service
systemctl enable --now systemd-networkd anbox-container-manager'
    # Add in to fstab:
    #   binder    /dev/binderfs    binder    nofail    0    0

    # modprobe
    alias modprobe-test='modprobe binder_linux
modprobe ashmem_linux
modprobe efivarfs'
}

systemctl-enable() {
    # systemctl enable
    echo "Set Home Permission to ${USER}..."
    sh -c "sudo chown -R ${USER}:${USER} $HOME" &
    sudo hwclock --systohc --utc
    sudo timedatectl set-ntp true
    sudo systemctl enable --now systemd-timesyncd
    sudo systemctl enable --now NetworkManager
    sudo systemctl enable --now ufw.service
    sudo systemctl enable --now fstrim.timer
    sudo systemctl enable --now tlp
    sudo systemctl enable iptables
    sudo systemctl enable --now systemd-vconsole-setup.service
    sudo update-ca-trust
    update-desktop-database ~/.config/mimeapps.list
    update-mime-database ~/.local/share/mime
    update-mime-database
    if [[ -d "$(/var/lib/snapd/snap)" ]]; then
        sh -c "sudo ln -s /var/lib/snapd/snap /snap"
    fi
    chmod 700 ~/.ssh
    chmod 600 ~/.ssh/*
    sh -c "sudo ln -fL ~/ownCloud/dotfile/hosts /etc/hosts"
    xdg-mime default nemo.desktop inode/directory
    xdg-mime default nemo.desktop x-directory/normal
    xdg-mime default nemo-autorun-software.desktop x-content/unix-software
    localectl set-locale LANG=en_US.UTF-8
    sudo locale-gen
    sudo locale -a
    sudo updatedb

    if [[ ! -f ~/.imwheelrc ]]; then
        cat >~/.imwheelrc <<EOF
".*"
None,      Up,   Button4, 4
None,      Down, Button5, 5
Control_L, Up,   Control_L|Button4
Control_L, Down, Control_L|Button5
Shift_L,   Up,   Shift_L|Button4
Shift_L,   Down, Shift_L|Button5
EOF
    fi
    imwheel -k

    timedatectl show
}

chroot_new() {
    # todo refactor
    # chroot script
    ln -sf /usr/share/zoneinfo/Europe/Zurich /etc/localtime
    hwclock --systohc
    # sed -i '178s/.//' /etc/locale.gen
    locale-gen
    echo "LANG=en_US.UTF-8" >>/etc/locale.conf
    echo "KEYMAP=de_CH-latin1" >>/etc/vconsole.conf
    echo "xps" >>/etc/hostname
    if [[ ! -f /etc/hosts ]]; then
        cat >/etc/hosts <<<EOF
        127.0.0.1 localhost
        ::1 localhost
        127.0.1.1 xps.localdomain xps
        EOF
    fi
    echo root:password | chpasswd

    pacman -Syyu --needed grub efibootmgr networkmanager network-manager-applet mtools dosfstools base-devel linux-headers avahi xdg-user-dirs xdg-utils gvfs gvfs-smb nfs-utils inetutils dnsutils bluez bluez-utils cups hplip alsa-utils bash-completion openssh rsync acpi acpi_call tlp edk2-ovmf bridge-utils dnsmasq vde2 openbsd-netcat iptables-nft ipset sof-firmware nss-mdns acpid os-prober ntfs-3g
    # pacman -S --noconfirm xf86-video-amdgpu
    # pacman -S --noconfirm nvidia nvidia-utils nvidia-settings

    grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=manjaro --recheck --verbose

    grub-mkconfig -o /boot/grub/grub.cfg

    systemctl enable --now NetworkManager
    systemctl enable bluetooth
    systemctl enable cups.service
    systemctl enable sshd
    systemctl enable avahi-daemon
    systemctl enable tlp
    systemctl enable fstrim.timer
    systemctl enable libvirtd
    systemctl enable acpid

    useradd -m shaderico
    echo shaderico:password | chpasswd
    usermod -aG libvirt shaderico

    if ! grep -q shaderico /etc/sudoers.d/shaderico, /etc/sudoers && ! grep -q shaderico /etc/sudoers; then
        echo "shaderico ALL=(ALL:ALL) ALL" >>/etc/sudoers.d/shaderico
        echo "shaderico ALL=(ALL:ALL) NOPASSWD: ALL" >>/etc/sudoers.d/shaderico
    fi

    printf "\e[1;32mDone! Type exit, umount -a and reboot.\e[0m"

}

# User
newUserGroupSet() {
    # Start group
    array=("wheel" "video" "vboxsf" "sys" "lp" "storage" "scanner" "audio" "video" "input" "users" "power" "optical" "network")

    for i in "${array[@]}"; do
        if ! getent group "$i" | grep -q "\b$USER\b"; then
            if sudo usermod -aG "$i" "$USER"; then
                echo "Added $USER to group $i"
            else
                echo "Failed to add $USER to group $i"
            fi
        fi
    done
}

userdiag_() {
    sudo geany /etc/shadow /etc/sudoers /etc/passwd /etc/gshadow /etc/group
}

useradd_() {
    sudo useradd -m "$1" && echo "user $1 added!..."

}

userGroupdel() {

    if [[ $# -ne 1 ]]; then
        echo "User from <group>"
        sudo gpasswd -d
        return 1
    fi

    # Prompt the user for confirmation before deleting the user and group
    read -r "REPLY?Are you sure you want to delete the user '$1' and its group(s)? [y/N] "
    case $REPLY in
    [yY][eE][sS][""] | [yY]) ;;
    *)
        echo "User and group deletion aborted"
        return 1
        ;;
    esac

    # Use usermod to remove the user from its groups before deleting it
    GROUP=$(id -Gn "$1" | sed 's/ /,/g')
    sudo usermod -G "$GROUP" -a "$1"

    # Use userdel to delete the user and groupdel to delete the group
    if
        sudo userdel "$1"
        sudo groupdel "$1"
    then
        echo "User and group for $1 have been deleted"
    else
        echo "Error: User and group for $1 could not be deleted"
        return 1
    fi

    # userdel / groupdel
    # Enable zsh tab completion for this function
    compdef '_users -S ""' userGroupdel
}

backup() {
    # Backup
    ln -fs ~/.config/mimeapps.list "$HOME"/.local/share/applications/mimeapps.list
    ln -fv ~/ownCloud/dotfile/.zshrc "$HOME"/.zshrc
    ln -fv ~/ownCloud/dotfile/tmux.conf "$HOME"/.config/tmux/tmux.conf

    # todo .p10k change from ~/ to .config
    ln -fv ~/ownCloud/dotfile/.p10k.zsh "$HOME"/.config/zsh/.p10k.zsh
    ln -fv ~/ownCloud/dotfile/.bashrc "$HOME"/.bashrc
    ln -fv ~/ownCloud/dotfile/.stignore "$HOME"/.stignore

    # todo change to root
    sh -c "sudo -u root ln -s /var/lib/snapd/snap /snap"
    sh -c "sudo -u root ln -fv ~/ownCloud/dotfile/pamac.conf /etc/pamac.conf"
    sh -c "sudo -u root ln -fv ~/ownCloud/dotfile/pacman.conf /etc/pacman.conf"
    sh -c "sudo -u root ln -fv ~/ownCloud/dotfile/vconsole.conf /etc/vconsole.conf"
    sh -c "sudo -u root ln -fv ~/ownCloud/dotfile/lightdm.conf /etc/lightdm/lightdm.conf"
    sh -c "sudo -u root ln -fv ~/ownCloud/dotfile/journald.conf /etc/systemd/journald.conf"
    sh -c "sudo -u root ln -fv ~/ownCloud/dotfile/resolved.conf /etc/systemd/resolved.conf"
    sh -c "sudo -u root ln -fv ~/ownCloud/dotfile/wifi.config /etc/modprobe.d/wifi.conf"
    sh -c "sudo -u root ln -fv ~/ownCloud/p-git/sshd_config /etc/ssh/sshd_config"
    sh -c "sudo -u root ln -fv ~/ownCloud/p-git/config.json /opt/safing/portmaster/config.json"

    ln -fv ~/ownCloud/dotfile/.zshrc ~/VM-share-rsx/.zshrc
    ln -fv ~/ownCloud/dotfile/.aliasrc ~/VM-share-rsx/.aliasrc
    ln -fv ~/ownCloud/dotfile/.bashrc ~/VM-share-rsx/.bashrc
    # ln -fv ~/ownCloud/dotfile/.profile ~/VM-share-rsx/.profile
    ln -fv ~/ownCloud/cpp/header.h ~/ownCloud/cpp/tutorial/header.h
    ln -fv ~/ownCloud/p-git/vscodium-setting/settings.json ~/.config/VSCodium/User/settings.json
}

imwheel() {

    if [[ ! -f ~/.imwheelrc ]]; then
        cat >~/.imwheelrc <<EOF
".*"
None,      Up,   Button4, 4
None,      Down, Button5, 5
Control_L, Up,   Control_L|Button4
Control_L, Down, Control_L|Button5
Shift_L,   Up,   Shift_L|Button4
Shift_L,   Down, Shift_L|Button5
EOF
        imwheel -k
        return 0
    else
        command imwheel -k
    fi
}

# Automatically ls when changing directory  #! problem with vscode code-runner
# cd() {
#     builtin cd "$@" && ls -thaNrl --color=auto --sort=time
# }

extract() {
    # Easy extract
    if [[ -f "$1" ]]; then
        case $1 in
        *.tar.bz2) tar xvjf "$1" ;;
        *.tar.gz) tar xvzf "$1" ;;
        *.bz2) bunzip2 "$1" ;;
        *.rar) rar x "$1" ;;
        *.gz) gunzip "$1" ;;
        *.tar) tar xvf "$1" ;;
        *.tbz2) tar xvjf "$1" ;;
        *.tgz) tar xvzf "$1" ;;
        *.zip) unzip "$1" ;;
        *.Z) uncompress "$1" ;;
        *.7z) 7z x "$1" ;;
        *) echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# Search
alias catfish='catfish --path=/ --start  --hidden --sort=path '

search() {
    # grep -s "*$1*" ~/.*
    exclude=("/run/user/1000" "/usr/share/icons")
    path_="/"
    exclude_args=()
    for dir in "${exclude[@]}"; do
        exclude_args+=(-path "$dir" -prune -o)
    done

    sudo find $path_ \( "${exclude_args[@]}" -false \) -o -iname "$1*" -print
    # locate
}

trans-de_en() {
    #     # translate-shell-git
    # https://www.soimort.org/translate-shell/
    /bin/trans de:en "$*"

}

trans_en_de() {
    #     # translate-shell-git
    # https://www.soimort.org/translate-shell/
    /bin/trans en:de "$*"

}

_pdf_completion() {
    # completion function for PDF files
    _files -g "*.pdf"
}

function imgopen() {
    # IMPG PNG Define function for opening image files with system's default image opener
    if command -v gio >/dev/null 2>&1; then
        if test -f "$1"; then
            setsid gio open "$1" >/dev/null 2>&1 &
        else
            echo "$1 is not a valid file."
        fi
    else
        echo "gio command not found. Please install glib and try again."
    fi
}

opendefaultpdf() {
    # Function for opening PDF files with the default program
    if command -v xdg-open >/dev/null 2>&1; then
        if [[ -f "$1" ]]; then
            xdg-open "$1" >/dev/null 2>&1 &
        else
            echo "$1 is not a valid file."
        fi
    else
        echo "xdg-open command not found. Please install xdg-utils and try again."
    fi
}

# Convert an image to PDF using ImageMagick
convert_toPDF() {
    # Check if the convert command is available
    if ! command -v convert >/dev/null 2>&1; then
        echo "ERROR: 'convert' command not found. Please install ImageMagick and try again." >&2
        return 1
    fi

    # Check that the input file exists
    local input="$1"
    if [[ ! -f "${input}" ]]; then
        echo "ERROR: '${input}' is not a valid file." >&2
        return 1
    fi

    # Perform the conversion
    local output="${2:-${input%.*}.pdf}"
    convert "${input}" "${output}.pdf" && echo "Image converted to PDF: ${output}.pdf"
}

set_wgetrc() {

    if [[ -z "${XDG_CONFIG_HOME}" ]]; then
        export XDG_CONFIG_HOME="${HOME}/.config"
    fi
    export WGETRC="${XDG_CONFIG_HOME}/wgetrc"
    echo "WGETRC is now set to ${WGETRC}"
}

colormap_() {
    # Colormap
    for i in {0..255}; do
        print -Pn "%K{$i}  %k%F{$i}$(printf "%03d" "$i")%f "
        if [[ "$((i % 6))" -eq 3 ]]; then
            print -P $'\n'
        fi
    done
}
colorcode_() {
    # Colorcode
    for i in {0..255}; do
        printf "\x1b[38;5;${i}mcolor%-5i\x1b[0m" "$i"
        if ! ((("$i" + 1) % 8)); then echo; fi
    done
}

trim() {
    local var=$*
    var="${var#"${var%%[![:space:]]*}"}" # remove leading whitespace characters
    var="${var%"${var##*[![:space:]]}"}" # remove trailing whitespace characters
    echo -n "$var"
}

flameshot_delay() {
    local delay=3000 # seconds
    flameshot gui --delay "$delay"
}

ansible-status() {
    ansible all -m ping
}

# ufw() {
#     if ! [[ "$#" == "ufw" ]]; then
#         sh -c "sudo ufw $*"
#     else
#         sh -c "ufw $*"
#     fi
# }

firewall_() {
    # todo
    # Check if ufw is running
    if systemctl ufw | grep "inactive" >/dev/null; then
        # Activate ufw
        echo 'Your Firewall is not active'
        echo 'activating...'
        sudo systemctl enable ufw --now
        # sh -c 'sudo ufw enable'
    fi
}
# firewall_

#todo alias nohup="nohup >/dev/null 2>&1 "

samba-up() {
    # samba setup
    sudo sh -c 'mkdir -p /var/lib/samba/usershares'
    sudo groupadd -r sambashare
    sh -c 'sudo chown root:sambashare /var/lib/samba/usershares'
    sh -c 'sudo chmod 1770 /var/lib/samba/usershares'
    sudo testparm /etc/samba/smb.conf
    sudo gpasswd sambashare -a "$USER"
    sudo systemctl restart smb nmb
    sudo systemctl enable avahi-daemon.service avahi-daemon.socket

}
samba_down() {
    disable smb.service nmb.service
    disable avahi-daemon.service
}

cpp__() {
    # todo run c++ in the terminal
    g++ "$1" -o file
    $2 Path to file

}

terminal_info() {
    #  Function to retrieve terminal information.
    "$(tty)"
}

visudodiag_() {
    # visudo
    sudo lsof /etc/sudoers
    visudo -c
}

# some note
: <<EOF
# spamassassin_activate    #! don't use this
# alias spamassassin_activate='sudo mkdir /etc/mail/spamassassin/sa-update-keys
# sudo chown spamd:spamd /etc/mail/spamassassin/sa-update-keys
# sudo chmod 700 /etc/mail/spamassassin/sa-update-keys
# sudo systemctl enable --now spamassassin.service
# sudo -u spamd /usr/bin/vendor_perl/sa-update && sudo -u spamd /usr/bin/vendor_perl/sa-compile
# '




EOF
